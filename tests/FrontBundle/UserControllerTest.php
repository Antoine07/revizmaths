<?php

namespace Tests\FrontBundle;


use Reviz\FrontBundle\Entity\Command;
use Reviz\FrontBundle\Entity\Module;

class UserControllerTest extends BaseTest
{

    protected $client = null;

    public function setUp()
    {
        parent::setUp();

        $this->client = static::createClient();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->client = null;
    }

    public function testConnexionFail()
    {

        // Create a new entry in the database
        $crawler = $this->client->request('GET', '/account/login');
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode(), "Unexpected HTTP status code for GET /admin/user/");

        // Fill in the form and submit it
        $form = $crawler->selectButton('Connexion')->form(array(
            '_username' => 'AntoineL',
            '_password' => 'Antoine'
        ));

        $this->client->submit($form);
        $crawler = $this->client->followRedirect();

        $this->assertGreaterThan(0, $crawler->filter('div:contains("Identifiants invalides.")')->count(), 'Missing element div:contains("Identifiants invalides.');
    }

    public function testConnexionAndRedirectToDashboard()
    {
        $userManager = $this->container->get('fos_user.user_manager');

        $userAdmin = $userManager->createUser();

        $userAdmin->setUsername('AntoineL');
        $userAdmin->setEmail('antoine@example.com');
        $userAdmin->setPlainPassword('Antoine');
        $userAdmin->setEnabled(true);
        $userAdmin->setRoles(['ROLE_ADMIN']);

        $userManager->updateUser($userAdmin, true);

        // Create a new entry in the database
        $crawler = $this->client->request('GET', '/account/login');
        $this->assertEquals(200, $this->client->getResponse()->getStatusCode(), "Unexpected HTTP status code for GET /admin/user/");

        // Fill in the form and submit it
        $form = $crawler->selectButton('Connexion')->form(array(
            '_username' => 'AntoineL',
            '_password' => 'Antoine'
        ));

        $this->client->submit($form);
        $crawler = $this->client->followRedirect();

        $this->assertGreaterThan(0, $crawler->filter('a:contains("Tableau de bord")')->count(), 'Missing element a:contains("Tableau de bord")');

    }

    public function testDisabledModule()
    {
        $client = $this->logIn('AntoineL', 'Antoine');
        $commandId = $this->prepareCommand();

        var_dump($commandId);

        $crawler = $client->request('POST', 'http://revizmaths.local/admin/user/command/active', ['id' => $commandId], [], [
            'HTTP_X-Requested-With' => 'XMLHttpRequest',
        ]);

        //var_dump($client->getResponse()->getContent());
    }

    protected function prepareCommand()
    {

        $module= new Module();
        $module->setName('Arithmetic');
        $this->em->persist($module);
        $this->em->flush();

        $student = $this->em
            ->getRepository('RevizFrontBundle:User')
            ->findByUsername('AntoineL');

        $arithmetic = $this->em
            ->getRepository('RevizFrontBundle:Module')
            ->findByName('Arithmetic');

        $command = new Command();
        $command->setUser($student[0]);
        $command->setTaxonomy($arithmetic[0]);
        $command->setIsLocked(true);

        $this->em->persist($command);
        $this->em->flush();

        $commands = $student[0]->getCommands();

        return $commands[0]->getId();

    }

}
